name: iOS Unit Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: macOS-12
    timeout-minutes: 30  # 设置整个作业超时为30分钟
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode 13.3
      run: |
        # 确保Xcode 13.3可用
        if [ ! -d "/Applications/Xcode_13.3.app" ]; then
          echo "Xcode 13.3 not found! Available Xcode versions:"
          ls /Applications | grep Xcode
          exit 1
        fi
        
        sudo xcode-select -s /Applications/Xcode_13.3.app/Contents/Developer
        xcodebuild -version
      
    - name: Configure private specs repo access
      env:
        PRIVATE_SPECS_USERNAME: ${{ secrets.PRIVATE_SPECS_USERNAME }}
        PRIVATE_SPECS_TOKEN: ${{ secrets.PRIVATE_SPECS_TOKEN }}
      run: |
        git config --global credential.helper store
        echo "https://${PRIVATE_SPECS_USERNAME}:${PRIVATE_SPECS_TOKEN}@gitee.com" > ~/.git-credentials
      
    - name: Install CocoaPods 1.12.0
      run: |
        # 使用更快的RubyGems源
        gem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/
        gem install cocoapods -v 1.12.0 --no-document
        pod --version
        
    - name: Add private specs repo
      run: |
        pod repo add gitee-talon163-my-private-pod-specs https://gitee.com/talon163/my-private-pod-specs.git
        pod repo update
      
    - name: Install Dependencies with cache
      run: |
        cd Example
        
        # 使用更快的pod安装参数
        pod install --repo-update --no-repo-update --verbose
      
    # 使用更可靠的方式创建模拟器
    - name: Create and boot iPhone 8 simulator
      run: |
        # 确保iOS 15.4运行时可用
        RUNTIME=$(xcrun simctl list runtimes | grep -E 'iOS 15\.4|com.apple.CoreSimulator.SimRuntime.iOS-15-4' | head -1 | awk -F'[()]' '{print $2}')
        
        if [ -z "$RUNTIME" ]; then
          echo "iOS 15.4 runtime not available. Available runtimes:"
          xcrun simctl list runtimes
          exit 1
        fi
        
        echo "Using runtime: $RUNTIME"
        
        # 创建模拟器
        SIMULATOR_ID=$(xcrun simctl create "CI-iPhone-8" "iPhone 8" "$RUNTIME")
        
        if [ -z "$SIMULATOR_ID" ]; then
          echo "Failed to create simulator"
          exit 1
        fi
        
        echo "Created simulator with ID: $SIMULATOR_ID"
        
        # 启动模拟器
        xcrun simctl bootstatus "$SIMULATOR_ID" -b
        xcrun simctl list devices
        
        # 等待模拟器完全启动
        echo "Waiting for simulator to boot..."
        sleep 30
        
    # 使用更可靠的测试命令
    - name: Run Unit Tests
      timeout-minutes: 15  # 单独为测试设置超时
      run: |
        cd Example
        
        SCHEME="RatingBox-Example"
        
        # 获取模拟器ID
        SIMULATOR_ID=$(xcrun simctl list devices | grep "CI-iPhone-8" | grep -Eo "[0-9A-F-]{36}" | head -1)
        
        if [ -z "$SIMULATOR_ID" ]; then
          echo "##[error] Could not find simulator ID"
          exit 1
        fi
        
        echo "##[debug] Using iPhone 8 simulator with ID: $SIMULATOR_ID"
        
        # 确保模拟器已启动
        xcrun simctl boot "$SIMULATOR_ID" || true
        
        # 运行测试 - 不使用管道以避免缓冲问题
        set -o pipefail
        xcodebuild test \
          -workspace RatingBox.xcworkspace \
          -scheme "$SCHEME" \
          -destination "platform=iOS Simulator,id=$SIMULATOR_ID" \
          ONLY_ACTIVE_ARCH=YES \
          CODE_SIGNING_ALLOWED=NO \
          > build.log 2>&1
        
        # 检查测试结果
        if grep -q "TEST SUCCEEDED" build.log; then
          echo "✅ Tests passed"
          cat build.log
        elif grep -q "TEST FAILED" build.log; then
          echo "❌ Tests failed"
          cat build.log
          exit 1
        else
          echo "##[error] Test result not found in log"
          cat build.log
          exit 1
        fi
        
    # 清理模拟器
    - name: Shutdown and delete simulator
      if: always()
      run: |
        SIMULATOR_ID=$(xcrun simctl list devices | grep "CI-iPhone-8" | grep -Eo "[0-9A-F-]{36}" | head -1)
        if [ -n "$SIMULATOR_ID" ]; then
          echo "Shutting down and deleting simulator: $SIMULATOR_ID"
          xcrun simctl shutdown "$SIMULATOR_ID" || true
          xcrun simctl delete "$SIMULATOR_ID" || true
        fi
