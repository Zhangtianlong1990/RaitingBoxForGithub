name: iOS Unit Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: macOS-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Configure private specs repo access
      env:
        PRIVATE_SPECS_USERNAME: ${{ secrets.PRIVATE_SPECS_USERNAME }}
        PRIVATE_SPECS_TOKEN: ${{ secrets.PRIVATE_SPECS_TOKEN }}
      run: |
        git config --global credential.helper store
        echo "https://${PRIVATE_SPECS_USERNAME}:${PRIVATE_SPECS_TOKEN}@gitee.com" > ~/.git-credentials
      
    - name: Install CocoaPods
      run: |
        gem install cocoapods
        pod --version
        
    - name: Add private specs repo
      run: |
        pod repo add gitee-talon163-my-private-pod-specs https://gitee.com/talon163/my-private-pod-specs.git
        pod repo update
      
    - name: Install Dependencies
      run: |
        cd Example
        pod install
      
    # 列出可用模拟器
    - name: List available simulators
      run: xcrun simctl list devices | grep -E 'iPhone|iPad'
      
    - name: Run Unit Tests
      run: |
        cd Example
        
        # 使用正确的 scheme 名称
        SCHEME="RatingBox-Example"
        
        # 筛选可用的iPhone模拟器（排除visionOS和iPad），优先选择iPhone 16系列
        DEVICE_INFO=$(xcrun simctl list devices | grep -E 'iPhone [0-9A-Za-z ]+' | grep -v 'visionOS' | grep -v 'iPad' | grep -E 'iOS [0-9.]+' | head -1)
        
        # 提取设备ID（格式：设备名 (ID)）
        DEVICE_ID=$(echo "$DEVICE_INFO" | awk -F'[()]' '{print $2}')
        # 提取设备名称
        DEVICE_NAME=$(echo "$DEVICE_INFO" | awk -F'[()]' '{print $1}' | xargs)
        # 提取系统版本
        OS_VERSION=$(echo "$DEVICE_INFO" | awk -F'OS=' '{print $2}' | awk '{print $1}')
        
        # 检查是否获取到有效ID
        if [ -z "$DEVICE_ID" ]; then
          echo "❌ 未找到可用的iPhone模拟器"
          exit 1
        fi
        
        echo "##[debug] Using device: $DEVICE_NAME (ID: $DEVICE_ID, OS: $OS_VERSION)"
        
        set -o pipefail
        xcodebuild test \
          -workspace RatingBox.xcworkspace \
          -scheme "$SCHEME" \
          -destination "platform=iOS Simulator,id=$DEVICE_ID" \
          ONLY_ACTIVE_ARCH=YES \
          CODE_SIGNING_ALLOWED=NO \
          | tee build.log
        
        # 检查测试结果
        if grep -q "TEST SUCCEEDED" build.log; then
          echo "✅ Tests passed"
        else
          echo "❌ Tests failed"
          cat build.log
          exit 1
        fi
