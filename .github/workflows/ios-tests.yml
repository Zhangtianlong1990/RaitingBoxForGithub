name: iOS Unit Tests

on: [push, pull_request]

jobs:
  test:
    runs-on: macOS-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode
      run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
      
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Configure private specs repo access
      env:
        PRIVATE_SPECS_USERNAME: ${{ secrets.PRIVATE_SPECS_USERNAME }}
        PRIVATE_SPECS_TOKEN: ${{ secrets.PRIVATE_SPECS_TOKEN }}
      run: |
        git config --global credential.helper store
        echo "https://${PRIVATE_SPECS_USERNAME}:${PRIVATE_SPECS_TOKEN}@gitee.com" > ~/.git-credentials
      
    - name: Install CocoaPods
      run: |
        gem install cocoapods
        pod --version
        
    - name: Add private specs repo
      run: |
        pod repo add gitee-talon163-my-private-pod-specs https://gitee.com/talon163/my-private-pod-specs.git
        pod repo update
      
    - name: Install Dependencies
      run: |
        cd Example
        pod install
      
    # 列出所有可用模拟器（用于调试）
    - name: List all available simulators
      run: xcrun simctl list devices
      
    - name: Run Unit Tests
      run: |
        cd Example
        
        SCHEME="RatingBox-Example"
        
        # 改进的模拟器选择逻辑：先找iPhone，找不到则用iPad，再找不到则用任意iOS模拟器
        # 第一步：尝试找到任何iPhone模拟器
        DEVICE_INFO=$(xcrun simctl list devices "iPhone" | grep -E "iOS [0-9.]+.*(available|booted)" | head -1)
        
        # 第二步：如果没找到iPhone，尝试找iPad模拟器
        if [ -z "$DEVICE_INFO" ]; then
          echo "##[debug] No iPhone simulator found, trying iPad..."
          DEVICE_INFO=$(xcrun simctl list devices "iPad" | grep -E "iOS [0-9.]+.*(available|booted)" | head -1)
        fi
        
        # 第三步：如果还是没找到，找任何iOS模拟器
        if [ -z "$DEVICE_INFO" ]; then
          echo "##[debug] No specific device found, trying any iOS simulator..."
          DEVICE_INFO=$(xcrun simctl list devices | grep -E "iOS [0-9.]+.*(available|booted)" | head -1)
        fi
        
        # 提取设备ID和名称
        DEVICE_ID=$(echo "$DEVICE_INFO" | awk -F'[()]' '{print $2}')
        DEVICE_NAME=$(echo "$DEVICE_INFO" | awk -F'[()]' '{print $1}' | xargs)
        
        # 最后的保障：如果所有方法都失败，使用模拟器占位符
        if [ -z "$DEVICE_ID" ]; then
          echo "##[debug] Using fallback simulator"
          DEVICE_ID="dvtdevice-DVTiOSDeviceSimulatorPlaceholder-iphonesimulator:placeholder"
          DEVICE_NAME="Any iOS Simulator Device"
        fi
        
        echo "##[debug] Using device: $DEVICE_NAME (ID: $DEVICE_ID)"
        
        set -o pipefail
        xcodebuild test \
          -workspace RatingBox.xcworkspace \
          -scheme "$SCHEME" \
          -destination "platform=iOS Simulator,id=$DEVICE_ID" \
          ONLY_ACTIVE_ARCH=YES \
          CODE_SIGNING_ALLOWED=NO \
          | tee build.log
        
        if grep -q "TEST SUCCEEDED" build.log; then
          echo "✅ Tests passed"
        else
          echo "❌ Tests failed"
          cat build.log
          exit 1
        fi
